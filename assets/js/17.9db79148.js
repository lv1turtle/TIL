(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{466:function(t,r,e){"use strict";e.r(r);var i=e(65),a=Object(i.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"inductive-definition-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inductive-definition-2"}},[t._v("#")]),t._v(" Inductive Definition(2)")]),t._v(" "),e("h2",{attrs:{id:"natural-numbers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#natural-numbers"}},[t._v("#")]),t._v(" Natural Numbers")]),t._v(" "),e("p",[t._v("N = {0,1,2,3, ... }")]),t._v(" "),e("p",[t._v("inference rules :")]),t._v(" "),e("p",[t._v("$$ \\overline{0} \\quad \\frac{n}{n+1} $$")]),t._v(" "),e("p",[t._v("grammar : $$ {n} \\rightarrow {0} \\mid {n+1} $$")]),t._v(" "),e("h2",{attrs:{id:"strings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#strings"}},[t._v("#")]),t._v(" Strings")]),t._v(" "),e("p",[t._v("inference rules :")]),t._v(" "),e("p",[t._v("$$ \\overline{ \\epsilon } \\quad \\frac{ \\alpha }{x \\alpha} \\ {x} \\in { {a, ... , z} } $$")]),t._v(" "),e("p",[t._v("In grammar : $$ { \\alpha } \\rightarrow { \\epsilon } \\mid {x \\alpha} \\ ( {x} \\in { {a, ... , z} } ) $$")]),t._v(" "),e("h2",{attrs:{id:"lists"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lists"}},[t._v("#")]),t._v(" Lists")]),t._v(" "),e("p",[t._v("inference rules :")]),t._v(" "),e("p",[t._v("$$ \\overline{nil} \\quad \\frac{l}{n*l} \\ {n} \\in {Z} $$")]),t._v(" "),e("p",[t._v("In grammar : $$ {l} \\rightarrow {nil} \\mid {n*l} \\ ({n} \\in {Z}) $$")]),t._v(" "),e("p",[t._v("The proof tree :")]),t._v(" "),e("p",[t._v("$$ \\frac{\\frac{\\frac{nil}{14"),e("em",[t._v("nil} {14} \\in {Z} }{3")]),t._v("14"),e("em",[t._v("nil} {3} \\in {Z} }{-7")]),t._v("3"),e("em",[t._v("14")]),t._v("nil} {-7} \\in {Z} $$")]),t._v(" "),e("p",[t._v("이 proof tree를 derivation tree 혹은 deduction tree라 한다."),e("br"),t._v("\n( proof tree = derivation tree = deduction tree )")]),t._v(" "),e("h2",{attrs:{id:"binary-trees"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binary-trees"}},[t._v("#")]),t._v(" Binary trees")]),t._v(" "),e("p",[t._v("inference rules :")]),t._v(" "),e("p",[t._v("$$ \\overline{n} \\quad {n} \\in {Z} \\quad \\frac{t}{(t,nil)} \\quad \\frac{t}{(nil,t)} \\quad \\frac{t1 \\ t2}{(t1,t2)} $$")]),t._v(" "),e("p",[t._v("In grammer : $$ {t} \\rightarrow {n} \\mid {(t,nil)} \\mid {(nil,t)} \\mid {(t,t)} $$")]),t._v(" "),e("p",[t._v("A proof that ((1,2),(3,nil)) is a binary tree :")]),t._v(" "),e("p",[t._v("$$ \\frac{\\frac{\\overline{1} \\quad \\overline{2}}{(1,2)} \\quad \\frac{\\overline{3}}{(3,nil)}}{((1,2),(3,nil))} $$")]),t._v(" "),e("h2",{attrs:{id:"propositional-logic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#propositional-logic"}},[t._v("#")]),t._v(" Propositional Logic")]),t._v(" "),e("p",[t._v("Examples:")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("$$ {T}, {F} $$"),e("br")])]),t._v(" "),e("li",[e("p",[t._v("$$ {T} \\land {F} $$"),e("br")])]),t._v(" "),e("li",[e("p",[t._v("$$ {T} \\implies {F} $$"),e("br")])]),t._v(" "),e("li",[e("p",[t._v("cf)\n$$ {A} \\implies {B} $$")]),t._v(" "),e("div",{staticClass:"language-<python> extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" T  T   T\n T  F   F\n F  T   T\n F  F   T\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"structural-induction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#structural-induction"}},[t._v("#")]),t._v(" *** Structural Induction ***")]),t._v(" "),e("p",[t._v("To prove that a proposition(명제) 'P(s)' is true for all structures 's'"),e("br")]),t._v(" "),e("ol",[e("li",[t._v("(Base case) : "),e("B",[t._v("'P'")]),t._v(" is true on simple structures")],1),t._v(" "),e("li",[t._v("(Inductive case) : If "),e("B",[t._v("'P'")]),t._v(" is true on the substructures of "),e("B",[t._v("'s'")]),t._v(", then it is true "),e("B",[t._v("'s'")]),t._v(" itself."),e("br"),t._v(" The assumption : "),e("B",[t._v("induction hypothesis")]),t._v(" (I.H.)")],1)]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Example"),e("br"),t._v("\nLet T be the set of binary trees:")]),t._v(" "),e("p",[t._v("$$ \\overline{leaf} \\quad \\frac{t1 \\ t2}{(n,t1,t2)} \\quad {n} \\in {Z} $$")]),t._v(" "),e("p",[t._v("Proof : If $$ {t} \\in {T} \\quad then \\quad {l(t)} = {i(t)} + {1} $$"),e("br")]),t._v(" "),e("p",[t._v("where $${l(t)}$$ and $${i(t)}$$ denote the number of leaves"),e("br"),t._v("\n$${l(leaf)} = {1} \\quad {i(leaf)}={0}$$"),e("br"),t._v("\n$${l(n,t1,t2)}={l(t1)}+{l(t2)} \\quad {i(n,t1,t2)} = {i(t1)} + {i(t2)} + {1} $$"),e("br"),e("br")]),t._v(" "),e("ol",[e("li",[t._v("Base case : when t = leaf, where $${l(t)}=1 \\quad {i(t)}={0}$$")]),t._v(" "),e("li",[t._v("Inductive case :"),e("br"),t._v(" "),e("B",[t._v("The inductive hepothesis(I.H.)")]),e("br"),e("br"),t._v("\n$${l(t1)}={i(t1)}+{1}, \\quad {l(t2)}={i(t2)} + {1}$$"),e("br"),e("br"),t._v("\nprove : $${l(n,t1,t2)}={i(n,t1,t2)}+{1}$$"),e("br"),e("br"),t._v("\n$${l(n,t1,t2)}={l(t1)}+{l(t2)}$$"),e("br"),t._v("\n$$={i(t1)}+{1}+{i(t2)} +{1}$$"),e("br"),t._v("\n$$={i(t1)}+{i(t2)}+{1}+{1}$$"),e("br"),t._v("\n$$={i(n,t1,t2)}+{1}$$")],1)])])])])}),[],!1,null,null,null);r.default=a.exports}}]);