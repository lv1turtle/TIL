(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{444:function(s,e,t){s.exports=t.p+"assets/img/foo.2e26ebe4.png"},445:function(s,e,t){s.exports=t.p+"assets/img/shell_.7878168c.png"},446:function(s,e,t){s.exports=t.p+"assets/img/parsing_bug.d529a369.png"},447:function(s,e,t){s.exports=t.p+"assets/img/var_c.a8abaa54.png"},448:function(s,e,t){s.exports=t.p+"assets/img/shell_5.1ce1b8d6.png"},449:function(s,e,t){s.exports=t.p+"assets/img/curl-a.502b4961.png"},450:function(s,e,t){s.exports=t.p+"assets/img/web_attack.4b944fb8.png"},477:function(s,e,t){"use strict";t.r(e);var a=t(65),l=Object(a.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"shellshock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shellshock"}},[s._v("#")]),s._v(" Shellshock")]),s._v(" "),a("h2",{attrs:{id:"background-shell-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#background-shell-functions"}},[s._v("#")]),s._v(" Background : Shell Functions")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Shell program : 운영체제에 있어서 command-line 번역 역할")]),s._v(" "),a("ul",[a("li",[s._v("사용자와 운영체제 사이의 인터페이스를 제공")]),s._v(" "),a("li",[s._v("shell의 다른 유형 : sh, bash, csh, zsh, windows powershell etc")])])]),s._v(" "),a("li",[a("p",[s._v("Bash shell : Linux OS의 가장 유명한 shell program")])]),s._v(" "),a("li",[a("p",[s._v("shellshock 취약점은 shell function에 연관됨 (아래는 shell function)\n"),a("img",{attrs:{src:t(444),alt:"image"}})])])]),s._v(" "),a("h2",{attrs:{id:"passing-shell-function-to-child-process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#passing-shell-function-to-child-process"}},[s._v("#")]),s._v(" Passing Shell Function to Child Process")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Shell variable을 정의하고 (foo) 이 foo를 shell function으로 지정하고 "),a("br"),s._v("\nshell function인 foo를 environment variable로 정의한다. "),a("br"),s._v("\n후에 취약한 버젼의 bash shell로 child process를 생성한다.")])]),s._v(" "),a("li",[a("p",[a("img",{attrs:{src:t(445),alt:"image"}})])]),s._v(" "),a("li",[a("p",[s._v("이 방식의 경우 parent process가 shell일 필요는 없으며"),a("br"),s._v(" environment variable을 사용할 수 있는 어떠한 process든 상관없다.")])])]),s._v(" "),a("h2",{attrs:{id:"shellshock-vulnerability"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shellshock-vulnerability"}},[s._v("#")]),s._v(" Shellshock Vulnerability")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("이 취약점(vulnerability)의 이름은 Shellshock 또는 bashdoor라고 한다.")])]),s._v(" "),a("li",[a("p",[s._v("이 취약점은 environment variables가 function definitons으로 변환할 때 bash에서 발생한 오류를 공격한다.")])]),s._v(" "),a("li",[a("p",[s._v("Shellshock는 bash안에서 발견된 security bugs의 집합체를 참조한다.")])]),s._v(" "),a("li",[a("p",[s._v("parent process는 child에게 function definition을 environment variable을 통해 전달할 수 있다.")])]),s._v(" "),a("li",[a("p",[s._v("parsing logic의 버그로 인해 bash는 변수 안에 포함된 어떤 명령어를 실행한다.\n"),a("img",{attrs:{src:t(446),alt:"image"}})]),s._v(" "),a("ul",[a("li",[s._v("이 그림과 같이 { } 밖의 extra command는 child process에게 넘겨줄때 실행이 된다.")])])])]),s._v(" "),a("h2",{attrs:{id:"mistake-in-the-bash-source-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mistake-in-the-bash-source-code"}},[s._v("#")]),s._v(" Mistake in the Bash Source Code")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("shellshock bug는 bash source code의 variables.c 파일 안에서 시작된다")])]),s._v(" "),a("li",[a("p",[s._v('environment variable이 정의될때 "(){"가 들어있다면 bash는 이것을 function으로 확인하고'),a("br"),s._v(' 아래 그림과 같이 "="을 " "으로 만든다.\n'),a("img",{attrs:{src:t(447),alt:"image"}})])]),s._v(" "),a("li",[a("p",[s._v('그렇게되면 string은 두 command로 보이게되고 parse_and_execute()가 이 echo "hello world" 와 echo "extra" 두 명령어를 실행한다.')])]),s._v(" "),a("li",[a("p",[s._v("Consequences:")]),s._v(" "),a("ul",[a("li",[s._v("Attacker는 그들의 명령어를 실행해 프로세스를 얻을 수 있다.")]),s._v(" "),a("li",[s._v("그 목표가 된 프로세스가 서버 프로세스거나 privilege권한으로 동작시키는 경우 보안 침해가 발생할 수 있다.")])])])]),s._v(" "),a("h2",{attrs:{id:"exploiting-the-shellshock-vulnerability"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exploiting-the-shellshock-vulnerability"}},[s._v("#")]),s._v(" Exploiting the Shellshock Vulnerability")]),s._v(" "),a("ol",[a("li",[s._v("The target process가 bash를 실행시켜야만 한다.")]),s._v(" "),a("li",[s._v("The target process가 environment variables를 통해 신뢰할 수 없는 사용자의 입력을 받을 수 있어야한다.")])]),s._v(" "),a("ul",[a("li",[s._v("이 2가지 조건이 취약점을 이용하는데 필요하다.")])]),s._v(" "),a("h2",{attrs:{id:"shellshock-attack-on-set-uid-programs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shellshock-attack-on-set-uid-programs"}},[s._v("#")]),s._v(" Shellshock Attack on Set_UID Programs")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("아래 예제에서 system function()을 통해 /bin/ls 프로그램을 실행할때 Set-UID root program이 bash process를 동작시킨다.")])]),s._v(" "),a("li",[a("p",[s._v("그러면 공격자에 의한 environ var set이 허가받지않은 명령어들을 실행한다.")]),s._v(" "),a("h4",{attrs:{id:"setting-up-the-vulnerable-program"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-the-vulnerable-program"}},[s._v("#")]),s._v(" Setting up the vulnerable program")]),s._v(" "),a("ul",[a("li",[a("img",{attrs:{src:t(448),alt:"image"}})])])])]),s._v(" "),a("h2",{attrs:{id:"shellshock-attack-on-cgi-programs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shellshock-attack-on-cgi-programs"}},[s._v("#")]),s._v(" Shellshock Attack on CGI Programs")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Common gateway interface(CGI)는 웹서버의 동적으로 웹 페이지들을 생성하는 프로그램을 동작시키는데 이용된다.")])]),s._v(" "),a("li",[a("p",[s._v("많은 CGI프로그램들이 shell scripts를 사용하나 bash가 사용되면 shellshock공격을 받을 수 있다.")])]),s._v(" "),a("li",[a("p",[s._v("setup")]),s._v(" "),a("ul",[a("li",[s._v("test.cgi라는 CGI program과 공격자용 서버와 희생자용 서버를 준비한다.")]),s._v(" "),a("li",[s._v("이를 위해 curl을 사용한다.")])])])]),s._v(" "),a("h2",{attrs:{id:"how-web-server-invokes-cgi-programs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-web-server-invokes-cgi-programs"}},[s._v("#")]),s._v(" How Web Server Invokes CGI Programs")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Apache web server에 CGI URL을 보냈을 때, Apache는 그 request를 시험한다.")])]),s._v(" "),a("li",[a("p",[s._v("만약 CGI request라면 Apache는 fork()를 사용하여 새로운 process를 동작시키고 그 process에서 exec() 함수를 사용해 CGI program을 실행시킨다.")])]),s._v(" "),a("li",[a("p",[s._v('test.cgi는 "#!/bin/bash"로 시작하는데 shell script를 동작시킬때 exec()가 실제로 실행시키는 부분은 /bin/bash이다.')])]),s._v(" "),a("li",[a("p",[s._v("즉, bash shell를 실행 시키므로써 shellshock 공격을 할 수 있다.")])])]),s._v(" "),a("h2",{attrs:{id:"how-to-use-data-get-into-cgi-programs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-use-data-get-into-cgi-programs"}},[s._v("#")]),s._v(" How to Use Data Get Into CGI Programs")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Apache가 child process를 생성할 때, 그것은 bash programs의 모든 environ var를 제공한다.")])]),s._v(" "),a("li",[a("p",[s._v("curl을 사용한 http request, http response를 보면 client의 data가 CGI program의 환경변수에 들어간 것을 확인할 수 있다.")])]),s._v(" "),a("li",[a("p",[s._v("'-A'옵션을 사용하면 user-agent field를 원하는데로 바꿀 수 있다.\n"),a("img",{attrs:{src:t(449),alt:"image"}})])]),s._v(" "),a("li",[a("p",[s._v("이와 같이 '-A' 옵션으로 environ var에 function definition을 집어넣어 shellshock 공격 가능\n"),a("img",{attrs:{src:t(450),alt:"image"}})])])]),s._v(" "),a("h2",{attrs:{id:"shellshock-attack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shellshock-attack"}},[s._v("#")]),s._v(" Shellshock Attack")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Steal Passwords : web application은 백앤드 데이터베이스와 연결되어있기에 login passswd가 필요한데 이는 공격자가 curl -A를 사용해 얻어낼 수 있다.")])]),s._v(" "),a("li",[a("p",[s._v("Reverse Shell : 공격에서 단순히 /bin/bash를 실행시키면 bash가 서버측에서 실행되지만 제어할 수가 없다. 그렇기에 필요한 것이 reverse shell이다.")]),s._v(" "),a("ul",[a("li",[s._v("reverse shell의 핵심은 표준 입력, 출력, error device를 network connection에 재전송하는 것이다.(redirect)")]),s._v(" "),a("li",[s._v("이렇게되면 그 shell은 connection으로부터 입력을 받고 connection으로 출력을 할 수 있다.")]),s._v(" "),a("li",[s._v("즉, 공격자가 어떤 명령어든 동작시킬 수 있고 그 출력을 그들의 머신으로 받을 수 있다.")])])])])])}),[],!1,null,null,null);e.default=l.exports}}]);